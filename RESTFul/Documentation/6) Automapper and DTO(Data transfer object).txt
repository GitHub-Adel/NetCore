Idea: El cliente puede enviar su request con lo que quiera, pero el servidor solo debe recibir aquellas 
properties que necesitamos. esto se logra recibiendo en el metodo del controller un UserDTO, en ves de
un User.

imaginemos esto: tenemos un Post con 3 properties : Id, Detail, User.
que pasaria si envia un request con Post que tenga la property User llena? 
exacto se crearia un User en la database. pero y si lo que queremos es crear solamente un Post sin User? 
exacto se debe crear un PostDTO, sin la User property y sin aquellas properties que no necesitamos.
aqui entra en juego automapper.
----------------------------------------------------------


1) create class PostDTO 
-----------------------------------
namespace SocialMedia.Api.DTO
{
    public class UserDTO
    {
        public string Firstname { get; set; }
    }
}



2) create class AutomapperProfile
------------------------------
namespace SocialMedia.Api.Mappings
{
public class AutomapperProfile:Profile
{
	public AutomapperProfile()
	{
		CreateMap<User,UserDTO>(); 
		CreateMap<UserDTO,User>(); 
	}	
}
}



3) register automapper en startup.cs
-------------------------------------
namespace SocialMedia.Api
{
    public class Startup
    {
        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {  
		services.AddAutoMapper(AppDomain.CurrentDomain.GetAssemblies());

4) modo de uso
------------------------------
namespace SocialMedia.Api.Services
{
    public abstract class BaseService
    {
        internal readonly IMapper _mapper;
        public BaseService(IMapper _mapper)
        {
            this._mapper = _mapper;
        }


        internal async Task<UserDTO> UpdateEntityAsync(UserDTO userDTO)
        {
            //mapeo el DTO a una entidad
            var user = _mapper.Map<TEntity>(dTO);
            _entity.Update(user);
            await _context.SaveChangesAsync();
            //mapeo a un DTO
            userDTO = _mapper.Map<UserDTO>(user);
            return userDTO;
        }


Nota:
-----------------------------------------------
UserDTO: clase hecha por nosotros con solo las propiedades que necesitamos.
User : clase de dominio autogenerada por entity framework desde database.



