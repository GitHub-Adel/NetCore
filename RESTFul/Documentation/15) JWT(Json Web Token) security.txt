https://jwt.io/ JSON Web Token (JWT) 

se utiliza para intercambiar informacion de forma segura entre las parte(un objeto json etc).

Autorizacion: este es el escenario mas comun para usar JWT. Una vez que el usuario ha iniciado sesion, 
cada solicitud posterior incluira el JWT hasta que expire, lo que permitira al usuario acceder a controllers y 
metodos que estan permitidos con ese token.


1) agregar propiedades al appsettings.json
---------------------------------------------
{  
  "SecretKey":"6656454545dssdsdsdsd",
  "Issuer":"https://localhost:5001/", 
  "Audience":"https://localhost:5001/",
  "TokenMinuteExpires":"2"
}


2) Configurar y registrar en Startup.cs 
-----------------------------------------------
namespace SocialMedia.Api
{
    public class Startup
    {
        public void ConfigureServices(IServiceCollection services)
        {            
            services.AddAuthentication(x=>{
               x.DefaultAuthenticateScheme=JwtBearerDefaults.AuthenticationScheme;     
               x.DefaultChallengeScheme=JwtBearerDefaults.AuthenticationScheme;
            }).AddJwtBearer(x=>{
                x.TokenValidationParameters=new TokenValidationParameters
                {
                    ValidateIssuer=true,
                    ValidateAudience=true,
                    ValidateLifetime=true,
                    ValidateIssuerSigningKey=true,
                    ValidIssuer=configuration["Issuer"],
                    ValidAudience=configuration["Audience"],
                    IssuerSigningKey=new SymmetricSecurityKey(Encoding.UTF8.GetBytes(configuration["SecretKey"]))
                };
            });  


        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            app.UseRouting();
	    app.UseAuthentication();
            app.UseAuthorization();
         
4) crear un modulo Rol, para asignar un rol a la seguridad.
   debe tener: RolID, Descripcion
---------------------------------------------------------------------------------

5) crear un modulo Seguridad para la seguridad del api.
   debe tener: UsuarioID,RolID,Usuario,Clave
---------------------------------------------------------------------------------

6) Debe haber una clase CredencialDTO con dos propiedades Usuario y Clave
   para authentificarse y poder generar el token
----------------------------------------------------
namespace SocialMedia.Api.DTOs
{
    public class CredencialDTO
    {
        public string Usuario { get; set; }
        public string Clave { get; set; }
    }
}


7) crear un modulo Token, con un metodo Get, para obtener el token
----------------------------------------------------
namespace SocialMedia.Api.Interfaces
{
    public interface ITokenService
    {
        string Get(CredentialDTO credentialDTO);
    }


namespace SocialMedia.Api.Services
{
    public class TokenService : ITokenService
    {
        readonly IConfiguration _configuration;
	readonly SocialmediaDBContext _context;
	readonly IGlobalExceptionService _exception;
        public TokenService(SocialmediaDBContext _context,IConfiguration _configuration, IGlobalExceptionService _exception)
        {
            	this._configuration = _configuration;
		this._context=_context;
		this._exception=_exception;
        }

        public string Get(CredentialDTO credentialDTO)
        {
            //logica de negocio
            var seguridad = _context.Seguridad
                           .Include(x=>x.Rol)
			   .Include(x=>x.Usuario)
                           .Where(x => x.Usuario == credencialDTO.Usuarior && x.Clave == credencialDTO.Clave)
                           .FirstOrDefault();  

	    if (seguridad==null) throw new CustomException("Usuario o contraseña invalido",HttpStatusCode.BadRequest);  

            //Header
            var a = new SymmetricSecurityKey( Encoding.UTF8.GetBytes(_configuration["SecretKey"]) );
            var b = new SigningCredentials(a, SecurityAlgorithms.HmacSha256);
            var header = new JwtHeader(b);

            //Claims                   
            var claims = new[]
            {
                new Claim(ClaimTypes.Name,seguridad.Usuario?.Nombre),
                new Claim("User",seguridad.Usuario?.Usuario),
                new Claim(ClaimTypes.Role, seguridad.Rol?.Descripcion)
            };

            //Payload
            var payload = new JwtPayload
            (
                _configuration["Issuer"],
                _configuration["Audience"],
                claims,
                DateTime.Now,
                DateTime.UtcNow.AddMinutes(double.Parse(_configuration["TokenMinuteExpires"]))
            );

            var token = new JwtSecurityToken(header, payload);

            return new JwtSecurityTokenHandler().WriteToken(token);
        }
    }
}


namespace SocialMedia.Api.Controllers
{
    [ApiController]
    [Route("api/[Controller]")]
    public class TokenController : ControllerBase
    {
        private readonly ITokenService _token;
        public TokenController(ITokenService _token)
        {
            this._token = _token;
        }

        [HttpGet(Name = nameof(Authentication))]
        public IActionResult Authentication(CredencialDTO credencialDTO)
        {
            var response = _token.Get(credencialDTO);
            return Ok(response);
        }



 
7) agregar atributo de authorize al controller, al que se desea dar permiso.
----------------------------------
namespace SocialMedia.Api.Controllers
{
    //esto indica que solo los administradores pueden usar este controller
    //Authorize tambien se puede usar a nivel de metodo.
    [Authorize(Roles="Administrador")]
    [ApiController]
    [Route("api/[Controller]")]
    public class UserController : ControllerBase
    {





8) modo de uso:
-----------------------------------
1. generar token por postman https://localhost:5001/api/Token/ usando method POST
   esto llama el metodo Authentication del controlador TokenController pasandole las credenciales
   por querybody que seran mapeada en el objeto CredencialDTO.

{
    "Usuario":"xxxxx",
    "Clave":"yyyyy"
}

si el usuario y clave son correcto, devolvera un token, copiarlo.

ahora crearemos un request para consumir el metodo Get de user.

method GET:  https://localhost:5001/api/User?ItemsPorPagina=10&PaginaActual=1
Authorization.Type=bearer token, Toekn= pegartokencopiado
















