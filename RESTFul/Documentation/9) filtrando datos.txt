Se utiliza para realizar busquedad por diferentes campos.
ejemplo: cliente, cedula, telefono, id, fecha, etc.


filtrado con una clase
-----------------------------------
namespace SocialMedia.Api.QueryFilters
{
    public abstract class BaseQueryFilter
    {
        public int? ItemByPage { get; set; }
        public int? CurrentPage { get; set; }
    }
}


namespace SocialMedia.Api.QueryFilters
{
   
    public class UserQueryFilter:BaseQueryFilter
    {
        public int? UserId { get; set; }
        public string Firstname { get; set; }
        public string Lastname { get; set; }
        public string Email { get; set; }
        public string Phone { get; set; }

    }
}





utilizamos IEnumerable para cargar la consulta en memoria, sin ejecutarla y asi poder ir 
agregando los filtros sin ejecutar con el metodo Where().
----------------------------

namespace SocialMedia.Api.Services
{
    public class UserService : IUserService
    {
        public List<UserDTO>> GetByFilters(UserQueryFilter filters)
        {
            //obtenemos IEnumerable
            var list = _context.User.AsEnumerable();
            //aplicamos filtros
            if (filters.UserId != null)
                list = list.Where(x => x.UserId.Equals(filters.UserId));
            if (filters.Firstname != null)
                list = list.Where(x => x.Firstname.ToLower().Contains(filters.Firstname.ToLower()));
            if (filters.Lastname != null)
                list = list.Where(x => x.Lastname.ToLower().Contains(filters.Lastname.ToLower()));
            if (filters.Phone != null)
                list = list.Where(x => x.Phone.Equals(filters.Phone));
	    
	    return list;	

           //si queremos retornar la lista paginada, este es el lugar 
	   //return GetPagedList(list,filters);
        }




modo de uso:
----------------------------

        [HttpGet]
        public  IActionResult GetUsers([FromQuery] UserQueryFilter filters)
        {                        
            var response =  _user.GetByFilters(filters);            
            return Ok(response);
        }



nota:
---------------

filtrado con parametros
----------------------
request: querystring
api/User/?userId=2&phone=8295295454
[HTTPGET]
Metodo(int? userId, string phone)

un metodo no debe recibir mas de 3 parametros, en su lugar utilice una class, y se mapea
api/User/?userId=2&phone=8295295454&name="jauan"&edad=25
[HTTPGET]
Metodo([FromQuery]UserQueryFilter filters)
[FromQuery]: indica que viene por la URL, con el formato querystring y mapea el objeto con esos parametros.



[FromQuery],[Frombody] : indica cual es el origen de los parametros.

