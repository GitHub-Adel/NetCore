Todas las interface que se inyectan via constructor(SocialMediaDBContext), deben ser configurada en el startup.cs
Su utilidad es usar interface por si hay que cambiar algo, hacerlo implementando la interface en 
otra class sin tocar la implementacion existente, y hacer que la interface apunte a la nueva implementacion.
------------------------------------------

namespace SocialMedia.Api
{
    public class Startup
    {
        public void ConfigureServices(IServiceCollection services)
        {
	   	//sin generic
		services.AddTransient<IUserServiceService, UserService>(); 
		//con generic
		services.AddScoped(typeof(IPaginationService<>),typeof(PaginationService<>));               
        }

	imaginas que ahora te solicitan realizar algunos cambios a la implementacion de UserService
	solo tienes que crear una nueva implementacion eje: UserService2 y hacer  
	que la interface IUserServiceService apunte a esta, sin tocar la ya existentes asi:
	services.AddTransient<IUserServiceService, UserService2>();


modo de uso
------------------------
namespace SocialMedia.Api.Services
{
    public abstract class BaseService<TEntity, TDTO> where TEntity : class where TDTO : class
    {
        internal readonly SocialmediaDBContext _context;
        internal readonly DbSet<TEntity> _entity;
        internal readonly IGlobalExceptionService _exception;
        internal readonly IMapper _mapper;
        internal readonly IPaginationService<TEntity> _pagination;
        public BaseService(SocialmediaDBContext _context, IGlobalExceptionService _exception, IMapper _mapper, IPaginationService<TEntity> _pagination)
        {
            this._pagination = _pagination;
            this._mapper = _mapper;
            this._exception = _exception;
            this._context = _context;
            _entity = _context.Set<TEntity>();
        }

