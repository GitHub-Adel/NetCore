
1) install automapper in(SocialMedia.Api, SocialMedia.Infrastructure)
2) create PostDTO class in(SocialMedia.Core/DTO)
3) create AutomapperProfile:Profile class in(SocialMedia.Infrastructure/Mapping)
4) register automapper in(SocialMedia.Api/startup.cs/CongigureServices() )
5) inject IMapper in controller's constructor.
6) Solo recibir DTO en los metodos de los controller.
7) hacer el mapping (Convertir el DTO a Entity o viceversa).
8) Solo recibir Entity en los metodos de los repository
9) Solo retornar DTO en las respuestas de los controllers.


Nota:
-----------------------------------------------
DTO: clase con solo las propiedades que necesitamos.
Entity : clase de dominio autogenerada por entity framework desde database.

Idea: El cliente puede enviar su request con lo que quiera, pero al servidor solo deben llegar aquellas 
properties que nosotros necesitamos. esto se logra recibiendo en el controller un DTO, en ves de
una Entity de dominio osea la que genera entity framework automaticamente.

imaginemos esto: tenemos una Entity Post with 3 properties : Id, Detalle, User.
que pasaria si el cliente envia una Post con un User? exacto se crearía tambien un User en la database. pero y si 
lo que queremos es crear solamente un Post y no User? exacto aqui entra en juego automapper, se crea un DTO sin
la User property y sin aquellas properties que no necesitamos.

a) automaper download:  https://www.nuget.org/packages/AutoMapper.Extensions.Microsoft.DependencyInjection

b) AutomapperProfile:
public class AutomapperProfile:Profile
{
	public AutomapperProfile()
	{
		CreateMap<Post,PostDTO>(); 
		CreateMap<PostDTO,Post>(); 
	}	
}

c) register automapper: services.AddAutoMapper(AppDomain.CurrentDomain.GetAssemblies());
   esto inject el AutomapperProfile anterior en todos los controllers al inject IMapper.

d) injectar IMapper : 
        public UserController(IUserRepository repo, IMapper mapper)
        {
            this.repo = repo;
            this.mapper = mapper;
        }


e) usar automapper: 
   var posts= _repo.GetPosts(); 
   var postsDTO = _mapper.Map<IEnumerable<PostDTO>>(posts);
   esto devuelve un IEnumerable<PostDTO> llenado con posts

   var post= _repo.GetPost(1); 
   var postDTO = _mapper.Map<PostDTO>(post);
