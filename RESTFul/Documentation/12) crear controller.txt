Cuando el usuario necesita una informacion, se la solicita al controlador a traves de endpoint o rutas
el controlador busca la informacion via servicios o interfaces y se la retorna al usuario.

aqui es donde se: 
------------------
1) aplica la seguridad
2) definen las rutas de acceso a los controladores
3) inyectan los services o interfaces
4) la comunicacion se realiza en clases DTO


namespace SocialMedia.Api.Controllers
{
    [Authorize(Roles="Administrator")] //seguridad por Rol
    [ApiController] //validacion de modelos
    [Route("api/[Controller]")] //rutas o endpoint
    public class UserController : ControllerBase
    {
        readonly IUserService _user;
        public UserController(IUserService _user)  //inyecion del servicio o interface
        {
            this._user = _user;
        }

	[Route("api/User/CrearUsuario")]  //ruta o endpoint por metodo
        [HttpPost] 	
        public async Task<IActionResult> CrearUsuario(UserDTO userDTO)
        {            
            userDTO.UserId=0;
            var response = await _user.AddAsync(userDTO);            
            return Ok(response);
        }


    }

}





nota:
------------------------------------
[ApiController] : valida los dataAnotations del modelo automaticamente. ya no hay que hacer esto
		if(modelstate.isvalid) en el metodo del controller.

[Route("api/[Controller]")] : Indica el controlador por donde entrara el request api/User, donde user es
				el controlador

[HttpPost]  : verbo que maneja el request:

api/user/2
[HttpGet("{id}")]  : recibir parametro
metodo(int id)

recibir parametros
-------------------------------
api/?id=2&phone=8295295454
[HttpGet]  
metodo(int? id,string phone)

recibir parametros y mapearlo en una clase, UserQueryFilter debera contener la propiedad id y phone
--------------------------------
api/?id=2&phone=8295295454
[HttpGet]
Metodo([FromQuery]UserQueryFilter filters)

