Al devolver un listado si hay mucho registros, se pone muy lento, para evitar esta lentitud
tenemos que paginar, dandole la opcion al usuario, de que pueda indicar el numero de registro por pagina
y la pagina que quiere ver. 
------------------------------------

namespace SocialMedia.Api.QueryFilters
{
    public abstract class BaseQueryFilter
    {
        public int? ItemByPage { get; set; }
        public int? CurrentPage { get; set; }
    }
}



1) crear class Navegation
-------------------------------------
namespace SocialMedia.Api.CustomEntities
{
    public class Navegation:BaseQueryFilter
    {
        public int TotalItem { get; set; }
        public int? Pages { get; set; }
        public int? Next { get; set; }
        public int? Previous { get; set; }
    }
}




1) crear IPaginationService
-----------------------------
namespace SocialMedia.Api.Interfaces
{
    public interface IPaginationService<T>  where T : class
    {
        IList<T> GetPagedList(IList<T> list, BaseQueryFilter filter=null);
        Navegation GetNavegation(IList<T> list, BaseQueryFilter filter=null);
    }
}



2) crear PaginationService
------------------------------
namespace SocialMedia.Api.Services
{
    public class PaginationService<T>: IPaginationService<T>   where T : class
    {
        private readonly IAppsettingService appsetting;

        public PaginationService(IAppsettingService appsetting)
        {
            this.appsetting = appsetting;
        }

        //retorna la lista paginada.  //skip=omitir, take=tomar  
        public IList<T> GetPagedList(IList<T> list, BaseQueryFilter filter=null)
        {
            if (filter.ItemByPage == null) filter.ItemByPage = appsetting.ItemByPage;
            if (filter.CurrentPage == null) filter.CurrentPage = appsetting.CurrentPage;

            return list.Skip( ((filter.CurrentPage - 1) * filter.ItemByPage).Value).Take(filter.ItemByPage.Value).ToList();
        }

        //retorna la filter del paginado(next=3, previeus=1 etc.)
        public Navegation GetNavegation(IList<T> list, BaseQueryFilter filter=null)
        {
            if ( (list.Count()==0) || (filter==null) ) return default(Navegation);

            if (filter.ItemByPage == null) filter.ItemByPage = appsetting.ItemByPage;
            if (filter.CurrentPage == null) filter.CurrentPage = appsetting.CurrentPage;

            var pages = list.Count() / filter.ItemByPage;
            pages = pages > 1 ? pages : 1;
            var current = filter.CurrentPage > pages ? pages : filter.CurrentPage;
            var next = current < pages ? current + 1 : current;
            var previous = current > 1 ? current - 1 : current;

            return new Navegation
            {
                TotalItem = list.Count(),
                ItemByPage = filter.ItemByPage,
                Pages = pages,
                CurrentPage = current,
                Next = next,
                Previous = previous
            };
        }

    }
}




3) configurar IPaginationService en startup.cs
---------------------------------
namespace SocialMedia.Api
{
    public class Startup
    {
        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddScoped(typeof(IPaginationService<>), typeof(PaginationService<>));
        }





4) utilizar en el controller cuando se tenga que retornar una collection
------------------------------------------
namespace SocialMedia.Api.Services
{
    public abstract class BaseService<TEntity, TDTO> where TEntity : class where TDTO : class
    {
        internal readonly IPaginationService<TEntity> _pagination;
        public BaseService(IPaginationService<TEntity> _pagination)
        {
            this._pagination = _pagination;
        }


        internal ResponseApi<List<TDTO>> GetPagedList(IEnumerable<TEntity> lista, BaseQueryFilter filter=null)
        {
            var list = lista.ToList();
            //aplicamos logica de negocio
            if (list.Count() == 0)
                _exception.CustomException($"No se encontro resultado", HttpStatusCode.NotFound);
            //aplicamos navegacion de la lista
            var navegation = _pagination.GetNavegation(list, filter);
            //aplicamos paginado
            var pagedList = _pagination.GetPagedList(list, filter);
            //mapeamos la lista paginada a un DTOs
            var dTOs = _mapper.Map<List<TDTO>>(pagedList);
            //retornamos nuestra repuesta personalizada.
            return new ResponseApi<List<TDTO>>(dTOs, navegation);
        }

