sirve de intermediario para intercambiar los datos entre la vista y el modelo.

es aqui donde se inyectan las interfaces o servicios.
-------------------------

1) click en solution
2) click derecho en controllers
3) create file
4) NameController.cs


namespace SocialMedia.Api.Controllers
{
    [ApiController]
    [Route("api/[Controller]")]
    public class UserController : ControllerBase
    {
        readonly IUserService _user;
        public UserController(IUserService _user)
        {
            this._user = _user;
        }

        [HttpPost]
        public async Task<IActionResult> CrearUsuario(UserDTO userDTO)
        {            
            userDTO.UserId=0;
            var response = await _user.AddAsync(userDTO);            
            return Ok(response);
        }


    }

}





nota:
------------------------------------
[ApiController] : valida los dataAnotations del modelo automaticamente. ya no hay que hacer esto
		if(modelstate.isvalid) en el metodo del controller.

[Route("api/[Controller]")] : Indica el controlador por donde entrara el request api/User, donde user es
				el controlador

[HttpPost]  : verbo que maneja el request:

api/user/2
[HttpGet("{id}")]  : recibir parametro
metodo(int id)

recibir parametros
-------------------------------
api/?id=2&phone=8295295454
[HttpGet]  
metodo(int? id,string phone)

recibir parametros y mapearlo en una clase, UserQueryFilter debera contener la propiedad id y phone
--------------------------------
api/?id=2&phone=8295295454
[HttpGet]
Metodo([FromQuery]UserQueryFilter filters)

