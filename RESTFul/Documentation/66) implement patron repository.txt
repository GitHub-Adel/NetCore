La idea es crear una interface extra, que contenga todos los metodos, para implementar la logica de negocio
en aquellos que lo requieran.
---------------------------

1) Create a IBaseRepository interface.
2) Create a BaseRepository.
3) registrar base repository in startup
4) create a interface IPostService
5) create a Service PostService:IPostService
6) registrar PostService in startup


namespace SocialMedia.Core.Interface
{
    public interface IUserService
    {
          Task Add(User user);
    }
}


namespace SocialMedia.Core.Services
{
    public class UserService : IUserService
    {
        private readonly IBaseRepository<User> _user
        private readonly IBaseRepository<Post> _post;

        public UserService(IBaseRepository<User> _user, IBaseRepository<Post> _post)
        {
            this._user = _user;
            this._post = _post;
        }

        public async Task Add(User user)
        {
            //Implementamos la primera logica de negocio
            //no crear usuario si la cedula ya existe.
            var user= await _user.FindAsync(x=>x.Cedula==user.Cedula);
            if(user!=null)
            throw new Exception("Ya existe un cliente con esta cedula");

            _user.Add(user);
        }
    }
}



note:
-----------------------
a) para registrar en el startup.cs, vea dependency injection



ejemplo de logica de negocio:
----------------------
a) no vender producto sin existencia.
b) no vender producto cuyo precio sea menor al costo.
c) no crear cliente sin cedula o rnc valido.
d) no permitir que un user comente una post mas de 3 veces.
	