Al devolver un listado si hay mucho registros, se pone muy lento, para evitar esta lentitud
tenemos que paginar, dandole la opcion al usuario, de que pueda indicar el numero de registro por pagina
y la pagina que quiere ver. 
------------------------------------

1) crear IPagination
2) crear PaginationService
3) configurar IPagination en startup.cs
4) utilizar en el controller cuando se tenga que retornar una collection

-----------------------------------------------


1) crear IPaginatio
-----------------------------
namespace SocialMedia.Core.Interfaces
{
    public interface IPagination<T>  where T : class
    {
        IEnumerable<T> GetPagedList(IEnumerable<T> list, int? itemByPage=null, int? currentPage=null);
       object GetNavegation(IEnumerable<T> list, int? itemByPage = null, int? currentPage = null);
    }
}


2) crear PaginationService
------------------------------
namespace SocialMedia.Core.Services
{
    public class PaginationService<T>: IPagination<T>   where T : class
    {
        private readonly IAppsetting appsetting;

        public PaginationService(IAppsetting appsetting)
        {
            this.appsetting = appsetting;
        }

        //retorna la lista paginada.  //skip=omitir, take=tomar  
        public IEnumerable<T> GetPagedList(IEnumerable<T> list, int? itemByPage = null, int? currentPage = null)
        {
            if (itemByPage == null) itemByPage = appsetting.ItemByPage;
            if (currentPage == null) currentPage = appsetting.CurrentPage;

            return list.Skip((currentPage.Value - 1) * itemByPage.Value).Take(itemByPage.Value).ToList();
        }

        //retorna el paginado(next=3, previeus=1 etc.)
        public object GetNavegation(IEnumerable<T> list, int? itemByPage = null, int? currentPage = null)
        {
            var pages = list.Count() / itemByPage;
            pages = pages > 1 ? pages : 1;
            var current = currentPage > pages ? pages : currentPage;
            var next = current < pages ? current + 1 : current;
            var previous = current > 1 ? current - 1 : current;

	    //propiedades de paginacion que retornara al cliente
            return new
            {
                TotalItem = list.Count(),
                //ItemByPage = itemByPage.Value,
                Pages = pages,
               // Current = current,
                Next = next,
                Previous = previous
            };
        }

    }
}




3) configurar IPagination en startup.cs
---------------------------------
namespace SocialMedia.Api
{
    public class Startup
    {
        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddScoped(typeof(IPagination<>), typeof(PaginationService<>));
        }





4) utilizar en el controller cuando se tenga que retornar una collection
------------------------------------------
namespace SocialMedia.Api.Controllers
{
    [ApiController]
    [Route("api/[Controller]")]
    public class UserController : ControllerBase
    {
        private readonly IUser _user;
        private readonly IPagination<User> _pagination;

        public UserController(IUser _user, IPagination<User> _pagination)
        {
            this._user = _user;
            this._pagination = _pagination;
        }

        [HttpGet]
        public  IActionResult GetUsers([FromQuery]UserQueryFilter filters)
        {  
            //obtengo la collection de user
            var users = _user.GetByFilters(filters); 
            //pagino la lista y retorno una pagina
            var usersPagedList=_pagination.GetPagedList(users, filters.ItemByPage, filters.CurrentPage); 
            //creo la navegacion para el paginado de una lista(next=3, previous=1, TotalItem=20 etc.).
            var navegation=_pagination.GetNavegation(users, filters.ItemByPage, filters.CurrentPage);                        
            //mapeo usersPagedList al usersDTO
            var usersDTO= mapper.Map<IEnumerable<UserDTO>>(usersPagedList);
               
            //para ir listando la respuesta en formato clave,valor ej:  
            var response = new Dictionary<string, object>()   
            {
                {"Users",usersDTO},
                {"Navegacion",navegation},
               // {"Save user",Url.Link() }
            };                          
            return Ok(response);
        }



