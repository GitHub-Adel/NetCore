Una interface es utilizada para la logica de negocio(validaciones), se inyecta en el constructor 
de la clase donse se utilizara.

la interfaces solo contiene firmas de metodos.

porque usar interfaces?: 
----------------------------
Facilitar el mantenimiento, imagina que tienes Implementacion1:Interface
si en un futuro necesitas modificar la implementacion1, solo tienes que crear implementacion2:interface 
y poner la configuracion en la clase startup.cs. haciendo que la interface apunte a implementacion2.
si hay que darle patra al cambio solo hay que hacer que la interface apunte a implementacion1 de nuevo.
-------------------------------------------------------

1) crear interface
------------------------------

namespace SocialMedia.Api.Interfaces
{
    public interface IClienteService
    {
        ClienteDTO Add(ClienteDTO cliente);
    }
}



2) crear implementacion
------------------------
	//recibo un DTO y retorno un DTO siempre.
	public ClienteDTO Add(ClienteDTO cliente)
        {
            try
            {
              //logica de negocio, generando exception
	      //mapeo de DTO a modelo
              //inserto el modelo
            }
            catch (Exception ex
            {
                generar Exception
            }
            //retorno DTO
            return clienteDTO;
        }





3) registrar la interface en el startup.cs (injection de dependencia):
---------------------------
namespace SocialMedia.Api
{
    public class Startup
    {
        public void ConfigureServices(IServiceCollection services)
        {
	   	//sin generic
		services.AddTransient<IUserService, UserService>(); 
		//con generic
		services.AddScoped(typeof(IBaseService<>),typeof(BaseService<>));               
        }

