Las utilizamos para logica de negocio en la implementacion de una interface, para lanzar una exception 
al cliente con un mejor formato y no con tantas cosas.


exception sin formato
---------------------------
System.Exception: Exception of type 'System.Exception' was thrown.
   at Services.UserService.AddUserAsync(User user) 
   in D:\NetCore\RESTFul\\Services\UserService.cs:line 39
   at SocialMedia.Api.Controllers.UserController.Save(UserDTO userDTO) 
   in D:\NetCore\RESTFul\SocialMedia.Api\Controllers\UserController.cs:line 33


exception con formato (lo que veremos en postman)
----------------------
las que validamos y generamos nosotros
---------------------------
{
    "Errors": {
        "status": 400,
        "title": "Bad Request",
        "message": "El cliente ya existe",
        "innerException": null
        "stackTrace": null
    }
}

las que genera el sistema, que no pudimos validar .
-----------------------------
{
    "Errors": {
        "status": 400,
        "title": "Bad Request",
        "message": "An error occurred while updating the entries. See the inner exception for details.",
        "innerException": "SqlDateTime overflow. Must be between 1/1/1753 12:00:00 AM and 12/31/9999 11:59:59 PM.",
        "stackTrace": "   at Services.UserService.AddUserAsync(User user) in D:\\NetCore\\RESTFul\\\\Services\\UserService.cs:line 38"
    }
}



solution:

1) crear clase CustomException con dos constructores
--------------------------------
namespace SocialMedia.Api.CustomEntities
{
    public class CustomException: Exception
    {
        public HttpStatusCode StatusCode { get; }
        //este constructor crea una exception y sera utilizado en el try
        public CustomException(string message,HttpStatusCode statusCode=default(HttpStatusCode), Exception innerException=null) : base(message,innerException)
        {
            StatusCode = statusCode;
        } 
    
        //este constructor disparará la exception al usuario y sera utilizado en el Catch
        public CustomException(Exception ex)
        {
           //registramos error en un log.
            //le mostramos error al usuario.
            if(ex.GetType()==typeof(CustomException)){
                var a= (CustomException)ex;
               throw new CustomException(ex.Message,a.StatusCode,ex.InnerException);
            } 
            else { //si no es un error personalizado, muestro un internal error por default
                throw new CustomException(ex.Message,HttpStatusCode.InternalServerError,ex.InnerException);
            } 
        }        
    }
}



2) crear filtro, aqui es donde formateamos el objeto devuelto con la exception
-----------------------------------
namespace SocialMedia.Api.Filters
{
    public class GlobalExceptionFilter : IExceptionFilter
    {
        public void OnException(ExceptionContext context)
        {
            if (context.Exception.GetType() == typeof(CustomException))
            {
                var exception = (CustomException)context.Exception;
                var validation = new
                {
                    Status =exception.StatusCode,
                    Title = exception.StatusCode.ToString(),
                    Message = exception.Message,
                    InnerException=exception.InnerException?.Message,
                    StackTrace=exception.StackTrace.Split(Environment.NewLine.ToCharArray())[0]
                };

                var json=new Dictionary<string,object>(){{"Errors",validation}};

                context.Result = new ObjectResult(json);
                context.HttpContext.Response.StatusCode = (int)exception.StatusCode;
                context.ExceptionHandled = true; //exception personalizada
            }

        }
    }
}


3) registrar filtro en startup.cs
-------------------------------
namespace SocialMedia.Api
{
    public class Startup
    {
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddControllers(x=>
            {
                x.Filters.Add<GlobalExceptionFilter>();
            })




modo de uso:
-------------------
        public Metodo()
        {            
            try
            {
              //logica de negocio
	      var cliente=_context.AsNoTracking().FirstOrDefault(....
              if(cliente != null) throw new CustomException("El cliente ya existe",HttpStatusCode.BadRequest);
            }
            catch (Exception ex)
            {   
            	new CustomException(ex);
            }
        }

