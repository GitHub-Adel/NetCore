La utilizamos para generar exception personalizada en UserService, para que el cliente 
vea las exception con un mejor formato y no con tantas cosas.


exception sin personalizar
---------------------------
System.Exception: Exception of type 'System.Exception' was thrown.
   at SocialMedia.Core.Services.UserService.AddUserAsync(User user) 
   in D:\NetCore\RESTFul\SocialMedia.Core\Services\UserService.cs:line 39
   at SocialMedia.Api.Controllers.UserController.Save(UserDTO userDTO) 
   in D:\NetCore\RESTFul\SocialMedia.Api\Controllers\UserController.cs:line 33


exception personalizada
----------------------
las que validamos nosotros
---------------------------
{
    "Errors": {
        "status": 400,
        "title": "Bad Request",
        "message": "Ya hay un User con ese Phone 8295295454",
        "innerException": null
        "stackTrace": null
    }
}

todas las demas que no pudimos validar.
-----------------------------
{
    "Errors": {
        "status": 400,
        "title": "Bad Request",
        "message": "An error occurred while updating the entries. See the inner exception for details.",
        "innerException": "SqlDateTime overflow. Must be between 1/1/1753 12:00:00 AM and 12/31/9999 11:59:59 PM.",
        "stackTrace": "   at SocialMedia.Core.Services.UserService.AddUserAsync(User user) in D:\\NetCore\\RESTFul\\SocialMedia.Core\\Services\\UserService.cs:line 38"
    }
}



solution:
--------------------------------
namespace SocialMedia.Core.Exceptions
{
    public class CustomException : Exception
    {
        public HttpStatusCode StatusCode { get; }
        public CustomException(string message,HttpStatusCode statusCode=default(HttpStatusCode), Exception innerException=null) : base(message,innerException)
        {
            StatusCode = statusCode;
        }
}


namespace SocialMedia.Infrastructure.Filters
{
    public class GlobalExceptionFilter : IExceptionFilter
    {
        public void OnException(ExceptionContext context)
        {
            if(context.Exception.GetType()==typeof(CustomException)){
                var exception = (CustomException)context.Exception;
                var validation=new{
                    Status=400,
                    Title="Bad Request",
                    Detail=exception.Message,
		    InnerException=exception.InnerException?.Message,
		    StackTrace=exception.StackTrace.Split(Environment.NewLine.ToCharArray())[0]
                };

                var json=new Dictionary<string,object>(){{"Errors",validation}}

                context.Result=new BadRequestObjectResult(json);
                context.HttpContext.Response.StatusCode=(int)HttpStatusCode.BadRequest;
                context.ExceptionHandled=true; //exception personalizada

            }
        }
    }
}



namespace SocialMedia.Api
{
    public class Startup
    {
        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddControllers(x=>
            {
                x.Filters.Add<GlobalExceptionFilter>();
            })






ejemplo de uso:
-------------------

namespace SocialMedia.Core.Services
{
    public class UserService : IUserService
    {
        public async Task<User> AddUserAsync(User user)
        {
            try
            {
                //logica de negocio: no se puede insertar un usuario si ya existe.
                var _user = _context.User.FirstOrDefault(x => x.Phone.Equals(user.Phone));
                if (_user != null) throw new CustomException($"Ya hay un User con ese Phone {user.Phone}");

                _context.User.Add(user);
                await _context.SaveChangesAsync();
                return user;
            }
            catch (Exception ex)
            {
                //registramos error en un log.
                //disparamos un error al cliente.
                   throw new CustomException(ex.Message,ex.InnerException);
            }
        }
    }
}

