La utilizamos para generar exception personalizada en UserService, para que el cliente 
vea las exception con un mejor formato y no con tantas cosas.


exception sin personalizar
---------------------------
System.Exception: Exception of type 'System.Exception' was thrown.
   at Services.UserService.AddUserAsync(User user) 
   in D:\NetCore\RESTFul\\Services\UserService.cs:line 39
   at SocialMedia.Api.Controllers.UserController.Save(UserDTO userDTO) 
   in D:\NetCore\RESTFul\SocialMedia.Api\Controllers\UserController.cs:line 33


exception personalizada
----------------------
las que validamos nosotros
---------------------------
{
    "Errors": {
        "status": 400,
        "title": "Bad Request",
        "message": "Ya hay un User con ese Phone 8295295454",
        "innerException": null
        "stackTrace": null
    }
}

todas las demas que no pudimos validar.
-----------------------------
{
    "Errors": {
        "status": 400,
        "title": "Bad Request",
        "message": "An error occurred while updating the entries. See the inner exception for details.",
        "innerException": "SqlDateTime overflow. Must be between 1/1/1753 12:00:00 AM and 12/31/9999 11:59:59 PM.",
        "stackTrace": "   at Services.UserService.AddUserAsync(User user) in D:\\NetCore\\RESTFul\\\\Services\\UserService.cs:line 38"
    }
}



solution:

1) crear CustomException 
--------------------------------
namespace SocialMedia.Api.Exceptions
{
    public class CustomException : Exception
    {
        public HttpStatusCode StatusCode { get; }
        public CustomException(string message,HttpStatusCode statusCode=default(HttpStatusCode), Exception innerException=null) : base(message,innerException)
        {
            StatusCode = statusCode;
        }        
    }
}


2) crear filtro
-----------------------------------
namespace SocialMedia.Api.Filters
{
    public class GlobalExceptionFilter : IExceptionFilter
    {
        public void OnException(ExceptionContext context)
        {
            if (context.Exception.GetType() == typeof(CustomException))
            {
                var exception = (CustomException)context.Exception;
                var validation = new
                {
                    Status =exception.StatusCode,
                    Title = exception.StatusCode.ToString(),
                    Message = exception.Message,
                    InnerException=exception.InnerException?.Message,
                    StackTrace=exception.StackTrace.Split(Environment.NewLine.ToCharArray())[0]
                };

                var json=new Dictionary<string,object>(){{"Errors",validation}};

                context.Result = new ObjectResult(json);
                context.HttpContext.Response.StatusCode = (int)exception.StatusCode;
                context.ExceptionHandled = true; //exception personalizada
            }

        }
    }
}


3) crear interface IGlobalExceptionService
------------------------------------
namespace SocialMedia.Api.Interfaces
{
    public interface IGlobalExceptionService    
    {
        void CatchException(Exception ex);
        void CustomException(string message,HttpStatusCode statusCode=default(HttpStatusCode), Exception innerException=null);
    }
}


4) crear clase GlobalExceptionService
------------------------------------
namespace SocialMedia.Api.Services
{
    public class GlobalExceptionService:IGlobalExceptionService
    {        
        //se pone en el cuerpo de un catch de un try catch 
        public void CatchException(Exception ex)
        {
            //registramos error en un log.
            //le mostramos error al usuario.
            if(ex.GetType()==typeof(CustomException)){
                var a= (CustomException)ex;
               throw new CustomException(ex.Message,a.StatusCode,ex.InnerException);
            } 
            else { //si no es un eror personalizado, muestro un internal error por default
                throw new CustomException(ex.Message,HttpStatusCode.InternalServerError,ex.InnerException);
            } 
        }

        //dispara una exception personalizada, puesta por nosotros mismo
	//se pone el el cuerpo de un metodo	
        public void CustomException(string message,HttpStatusCode statusCode=default(HttpStatusCode), Exception innerException=null){
            throw new CustomException(message,statusCode,innerException);
        }

    }
}


5) registrar filtro e inteface
-------------------------------
namespace SocialMedia.Api
{
    public class Startup
    {
        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddControllers(x=>
            {
                x.Filters.Add<GlobalExceptionFilter>();
            })

	    services.AddTransient<IGlobalExceptionService, GlobalExceptionService>();


modo de uso:
-------------------

namespace SocialMedia.Api.Services
{
    public abstract class BaseService<TEntity, TDTO> where TEntity : class where TDTO : class
    {
        internal readonly IGlobalExceptionService _exception;
        public BaseService(IGlobalExceptionService _exception)
        {
            this._exception = _exception;
        }

        internal void ExceptionIfExist(Func<TEntity, bool> predicate)
        {
            //AsNoTracking() : es para dejar de seguir la entidad y que no me de error 
            //al llamar el update(entitty)
            var entity = _entity.AsNoTracking().FirstOrDefault(predicate);
            if (entity != null) _exception.CustomException($"{entity.GetType().Name} ya existe", HttpStatusCode.Conflict);
        }





namespace SocialMedia.Api.Services
{
    public class UserService :BaseService<User,UserDTO>, IUserService
    {
        public UserService(IGlobalExceptionService _exception) : base(_exception)
        {
        }

        public async Task<ResponseApi<UserDTO>> AddAsync(UserDTO userDTO)
        {            
            try
            {
              //logica de negocio
              ExceptionIfExist(x=>x.Email==userDTO.Email && x.Active==true);
            }
            catch (Exception ex)
            {
                _exception.CatchException(ex);
            }
        }


