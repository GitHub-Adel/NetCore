la idea es tener dos models un entity y un DTO para no utilizar la entity directly, ya que tiene 
properties que no necesitamos, puedes copy properties from entity to DTO.

el mapeo es para pasar un entity a un DTO y viceversa de manera automatica.

El mapping is used in controller, no used in repository
1) install automapper in(SocialMedia.Api, SocialMedia.Infrastructure)
2) create DTO class in(SocialMedia.Core/DTO)
3) create AutomapperProfile:Profile class in(SocialMedia.Infrastructure/Mapping)
4) register automapper in(SocialMedia.Api/startup.cs/CongigureServices() )
5) injectar IMapper en el controller's constructor.
6) usar automapper into controller. 


Nota:
-----------------------------------------------
a) automaper:  https://www.nuget.org/packages/AutoMapper.Extensions.Microsoft.DependencyInjection

b) AutomapperProfile:
public class AutomapperProfile:Profile
{
	public AutomapperProfile()
	{
		CreateMap<Post,PostDTO>(); 
		CreateMap<PostDTO,Post>(); 
	}	
}

c) register automapper: services.AddAutoMapper(AppDomain.CurrentDomain.GetAssemblies());
   esto inject el AutomapperProfile anterior en todos los controllers al inject IMapper.

d) injectar IMapper :  (IMapper _mapper)

e) usar automapper: 
   var posts= _repo.GetPosts(); 
   var postsDTO = _mapper.Map<IEnumerable<PostDTO>>(posts);
   esto devuelve un IEnumerable<PostDTO> llenado con posts

   var post= _repo.GetPost(1); 
   var postDTO = _mapper.Map<PostDTO>(post);
