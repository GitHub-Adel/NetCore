es una respuesta estandar que devolveremos al cliente, esta tendrá:
Data: que contendrá la entidad o la lista de entidad.
Navegation:  que contendrá la navegation(Current:1, Next:2) etc.
Link: que contendrá la hypermedia, para navegar por los metodos
------------------------------------

1) crear class Navegation
-------------------------------------
namespace SocialMedia.Api.CustomEntities
{
    public class Navegation:BaseQueryFilter
    {
        public int TotalItem { get; set; }
       // public int? ItemByPage { get; set; }
        public int? Pages { get; set; }
       // public int? Current { get; set; }
        public int? Next { get; set; }
        public int? Previous { get; set; }
    }
}

namespace SocialMedia.Api.QueryFilters
{
    public abstract class BaseQueryFilter
    {
        public int? ItemByPage { get; set; }
        public int? CurrentPage { get; set; }
    }
}


2) crear class Link
------------------------------
namespace SocialMedia.Api.CustomEntities
{
    public class Link
    {
        public string Href { get; set; }
        public string Rel { get; set; }
        public string Method { get; set; }
    }
}


3) crear clase ResponseApi
--------------------------------------

namespace SocialMedia.Api.CustomEntities
{
    public class ResponseApi<T> where T : class
    {
        public T Data { get; set; }
        public Navegation Navegation { get; set; }
        public List<Link> Links { get; set; } 
        public ResponseApi(T data, Navegation  navegation=null)
        {          
            // var list=(List<T>)Convert.ChangeType(data, typeof(List<T>));
            this.Data=data;
            this.Navegation=navegation; 
            this.Links= new List<Link>();        
        }

    }

}


4) modo de uso
-------------------------------
        internal ResponseApi<List<User>> GetPagedList()
        {
            return new ResponseApi<List<User>>(userDTOs, navegation);
        }


            [HttpGet(Name = nameof(GetRoles))]
            public IActionResult GetRoles([FromQuery] RoleQueryFilter filters)
            {
                //obtengo la collection de role
                var response = _role.Get(filters);
                return Ok(response);
            }





