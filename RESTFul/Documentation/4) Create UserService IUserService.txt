esta interface es para la logica de negocio, sera inyectada por startup en los controller 
y se utilizara en los controllers, pueden ser inyectada en otros services.

como ya entity framework core  incluye el patron repository y unit of work. lo utilizaremos
directamente en nuestra capa de dominio o core. para eso necesitamos instalar entity framework core 
en esta capa.

-------------------------------------------------------
interface: define los method, solo la firma. (abstraction), se utiliza para exponer solo los metodos 
	   al controller, sin la implementacion.
	

1) create file
2) IUserService.cs
3) elegir interface


namespace SocialMedia.Core.Interface
{
    public interface IUserService
    {
        Task<User> AddUserAsync(User user);
    }
}




===============================================

1) create file
2) UserService.cs
3) elegir class


    public class UserService : IUserService
    {
        private readonly SocialmediaDBContext _context;
        public UserService(SocialmediaDBContext _context)
        {
            this._context = _context;
        }

        public async Task<User> AddUserAsync(User user)
        {
            try
            {
                //logica de negocio: no se puede insertar un usuario si ya existe.
                var _user = _context.User.FirstOrDefault(x=>x.Phone.Equals(user.Phone));
                if(_user != null) throw new CustomException("Ya hay un User con ese Phone");

                _context.User.Add(user);
                await _context.SaveChangesAsync();
                return user;
            }
            catch (Exception ex)
            {
                //registramos error en un log.
                //le mostramos error al usuario.
                if (ex.GetType() == typeof(CustomException))
                    throw new CustomException($"{ex.Message}");
                else
                    throw new Exception($"{ex.Message}");
            }


        }

    }
}


