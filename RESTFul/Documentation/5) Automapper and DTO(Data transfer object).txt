Automaper:Se utiliza para convertir un objeto en otro, las propiedades deben ser identica y del mismo tipo,
	pero pueden tener diferentes numeros de propiedades.

DTO: se utiliza para definir en ella las propiedades que necesitamos y asi no tocar el modelo original.

crear un cliente desde postman:
--------------------------------------
{
    "Nombre": "Adelson",
    "Compras": {
        "Id":"1",
        "Monto":500,
        "Fecha":"01-02-2020"
    }
}

al recibir este objeto en c# y guardarlo en sql, se crearia un cliente y una compra, pero solo queremos 
crear un cliente, para eso usamos una clase DTO que contenga unicamente los datos del cliente sin la compras.
----------------------------------------------------------

1) registrar automapper en startup.cs
-------------------------------------
namespace SocialMedia.Api
{
    public class Startup
    {        
        public void ConfigureServices(IServiceCollection services)
        {  
		services.AddAutoMapper(AppDomain.CurrentDomain.GetAssemblies());



2) crear clase DTO sin la propiedad Compras
-----------------------------------
namespace SocialMedia.Api.DTO
{
    public class ClienteDTO
    {
        public string Nombre { get; set; }
    }
}



3) crear clase AutomapperProfile en donde configuraremos todos los modelos con sus respectivo DTO a mapear
------------------------------
namespace SocialMedia.Api.Mappings
{
public class AutomapperProfile:Profile
{
	public AutomapperProfile()
	{
		CreateMap<Cliente,ClienteDTO>(); 
		CreateMap<ClienteDTO,Cliente>(); 
	}	
}
}



4) modo de uso
------------------------------
namespace SocialMedia.Api.Services
{
    public class ClienteService
    {
        readonly IMapper _mapper;
        public ClienteService(IMapper _mapper)
        {
            this._mapper = _mapper;
        }


        public ClienteDTO Update(ClienteDTO clienteDTO)
        {
            //mapeo
	    //convierto ClienteDTO en Cliente, es como convertir un int en un string
            var cliente = _mapper.Map<Cliente>(clienteDTO);	   
            _entity.Update(cliente);
            await _context.SaveChangesAsync();
	   
	    //luego de actualizar, vuelvo y convierto Cliente a ClienteDTO, para devolverlo al usuario.
            clienteDTO = _mapper.Map<ClienteDTO>(cliente);
            return clienteDTO;
        }


Nota:
-----------------------------------------------
ClienteDTO: clase hecha por nosotros con solo las propiedades que necesitamos.
Cliente : Modelo del dbcontext autogenerado por entity framework.



